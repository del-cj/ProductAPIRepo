{
	"info": {
		"_postman_id": "12e64ed8-c02a-4f57-af13-726cfe1ab540",
		"name": "productsapp-automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33725398"
	},
	"item": [
		{
			"name": "Get All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response to be 200 OK\", () => {pm.response.to.have.status(200)});\r",
							"\r",
							"// id 1\r",
							"pm.test(\"Value of [0] ID to be 1\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData[0].Id).to.equal(1);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData[0]).to.be.an('object');\r",
							"  pm.expect(responseData[0].Name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Category is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData[0]).to.be.an('object');\r",
							"  pm.expect(responseData[0].Category).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price is a non-negative number\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData[0]).to.be.an('object');\r",
							"  pm.expect(responseData[0].Price).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"// id 2\r",
							"pm.test(\"Value of [1] ID to be 2\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData[1].Id).to.equal(2);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData[1]).to.be.an('object');\r",
							"  pm.expect(responseData[1].Name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Category is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData[1]).to.be.an('object');\r",
							"  pm.expect(responseData[1].Category).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price is a non-negative number\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData[1]).to.be.an('object');\r",
							"  pm.expect(responseData[1].Price).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"// id 3\r",
							"pm.test(\"Value of [2] ID to be 3\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData[2].Id).to.equal(3);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData[2]).to.be.an('object');\r",
							"  pm.expect(responseData[2].Name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Category is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData[2]).to.be.an('object');\r",
							"  pm.expect(responseData[2].Category).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price is a non-negative number\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData[2]).to.be.an('object');\r",
							"  pm.expect(responseData[2].Price).to.be.a('number').and.to.be.at.least(0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/products",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.Id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Id should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.Name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Category is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.Category).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price is a non-negative number\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.Price).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/products/2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"products",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://localhost:44392"
		}
	]
}